
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    tier: www-frontend
    track: production
  name: httpd-dep
spec:
  port:
    targetPort: 80
  to:
    kind: Service
    name: httpd-dep
    weight: 100
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
  wildcardPolicy: None
---

apiVersion: v1
kind: Service
metadata:
  labels:
    tier: www-frontend
    track: production
  name: httpd-dep
spec:
  #trafficDistribution: PreferClose
  trafficDistribution: # unset, use normal LoadBalancing
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
  selector:
    tier: www-frontend
    track: production
  type: LoadBalancer
  #type: NodePort


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    tier: www-frontend
    track: production
  annotations:
  ## for Stakater-Reloader-Enablement
  # configmap.reloader.stakater.com/reload: "cm-httpd-conf"
  name: httpd-dep
spec:
  minReadySeconds: 0
  replicas: 4
  selector:
    matchLabels:
      tier: www-frontend
      track: production
  strategy:
    #type: Recreate
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%   ## means: during update, 125% (in this case: 5 [100% = 4 Pods]) pods are allowed
      #maxSurge: 2    ## or use integer Number (Pod Count)
      maxUnavailable: 25%  ## means: during update, not more than 25% (in this case: 1) pod hast to be unavailable
      #maxUnavailable: 1   ## or use integer Number (Pod Count)
  template:
    metadata:
      labels:
        tier: www-frontend
        track: production
    spec:
      # priorityClassName: high
      securityContext:
        runAsNonRoot: false
        # apache needs this default
      containers:
      - name: ext-checker
        image: registry.access.redhat.com/ubi8/ubi-minimal:latest
        #command: ['sh', '-c', 'while true; do curl http://localhost:80 | grep works; sleep 2; done']
        ## command using ConfigMap ext-checker-config:
        command: ['sh', '-c', 'while true; do curl $TARGET_URL | grep works; sleep 2; curl $EXTERNAL_URL; sleep 2; done']
        env:
        - name: EXTERNAL_URL
          valueFrom:
            configMapKeyRef:
              name: ext-checker-config
              key: EXTERNAL_URL
        - name: TARGET_URL
          valueFrom:
            configMapKeyRef:
              name: ext-checker-config
              key: TARGET_URL
        resources:
          requests:
            cpu: 20m
            memory: 10M
          limits:
            cpu: 40m
            memory: 20M
      - image: gcr.io/cluster-01-271319/docker.io/library/httpd:2.4.39-1
      #- image: gcr.io/cluster-01-271319/docker.io/library/httpd:latest-1
        imagePullPolicy: IfNotPresent
        name: httpd-dep
        securityContext:
          allowPrivilegeEscalation: false
          capabilities: 
            drop: ["CHOWN", "MKNOD"]
          seccompProfile:
            type: "RuntimeDefault" 
        resources:
          requests:
            cpu: 200m
            memory: 150M
          limits: 
            cpu: 500m
            memory: 200M
        # LivenessProbe below only used in this example to simulate container crash AFTER
        # Readiness Probe reports 'success' during Updates
        livenessProbe:
          exec:
            command: ["/bin/bash","-c","pidof httpd"]
            #command: ["/bin/bash", "-c", "pidof httpd-xyz"]
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 4
          successThreshold: 1
        readinessProbe:
          httpGet:
            #path: /doesntexist
            path: /
            port: 80
          initialDelaySeconds: 30
          # as alternative to static/fixed initialdelaySeconds, use startupProbe
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        #startupProbe:
        #  tcpSocket:
        #    port: 80
        #  initialDelaySeconds: 20
        #  failureThreshold: 20
        #  periodSeconds: 5 
      ### 
      ## when using customized httpd.conf in ConfigMap, create cm first, then activate this section
        volumeMounts:
        - name: config-volume
          mountPath: /usr/local/apache2/conf/httpd.conf
          subPath: httpd.conf
          # 'subpath' ensures that only k/v pair "httpd.conf: <content>" ist mounted from CM,
          # otherwise the complete cm content (if there are also other k/v pairs) is mounted
      volumes:
      - name: config-volume
        configMap:
          name: cm-httpd-conf
---






